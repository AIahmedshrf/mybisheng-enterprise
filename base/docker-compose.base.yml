# ========================================
# Bisheng Enterprise - Base Services
# ========================================
# الخدمات الأساسية المطلوبة لتشغيل Bisheng
# ========================================

version: '3.8'

# ==================== الشبكات ====================
networks:
  bisheng-network:
    name: ${NETWORK_NAME:-bisheng-network}
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.28.0.0/16}

# ==================== Volumes ====================
volumes:
  postgres_data:
    name: bisheng_postgres_data
  redis_data:
    name: bisheng_redis_data
  milvus_data:
    name: bisheng_milvus_data
  etcd_data:
    name: bisheng_etcd_data
  elasticsearch_data:
    name: bisheng_elasticsearch_data
  minio_data:
    name: bisheng_minio_data

# ==================== الخدمات ====================
services:

  # ==================== PostgreSQL ====================
  postgres:
    image: postgres:${POSTGRES_VERSION:-15-alpine}
    container_name: bisheng-postgres
    hostname: postgres
    restart: ${RESTART_POLICY:-unless-stopped}
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bisheng}
      POSTGRES_USER: ${POSTGRES_USER:-bisheng}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
      
      # Performance tuning
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS:-200}
      POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS:-2GB}
      POSTGRES_EFFECTIVE_CACHE_SIZE: ${POSTGRES_EFFECTIVE_CACHE_SIZE:-6GB}
      POSTGRES_MAINTENANCE_WORK_MEM: ${POSTGRES_MAINTENANCE_WORK_MEM:-512MB}
      POSTGRES_WORK_MEM: ${POSTGRES_WORK_MEM:-10MB}
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./configs/postgresql/init-scripts:/docker-entrypoint-initdb.d:ro
      - ./logs/postgresql:/var/log/postgresql
    
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    
    networks:
      - bisheng-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bisheng} -d ${POSTGRES_DB:-bisheng}"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-60s}
    
    deploy:
      resources:
        limits:
          cpus: '${POSTGRES_CPU_LIMIT:-2}'
          memory: ${POSTGRES_MEM_LIMIT:-4g}
        reservations:
          cpus: '${POSTGRES_CPU_RESERVATION:-1}'
          memory: ${POSTGRES_MEM_RESERVATION:-2g}
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_ROTATION:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

  # ==================== Redis ====================
  redis:
    image: redis:${REDIS_VERSION:-7.2-alpine}
    container_name: bisheng-redis
    hostname: redis
    restart: ${RESTART_POLICY:-unless-stopped}
    
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-changeme}
      --maxmemory ${REDIS_MAXMEMORY:-2gb}
      --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
      --appendonly yes
      --appendfsync everysec
    
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    networks:
      - bisheng-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-60s}
    
    deploy:
      resources:
        limits:
          cpus: '${REDIS_CPU_LIMIT:-1}'
          memory: ${REDIS_MEM_LIMIT:-4g}
        reservations:
          cpus: '${REDIS_CPU_RESERVATION:-0.5}'
          memory: ${REDIS_MEM_RESERVATION:-2g}
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_ROTATION:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

  # ==================== Etcd (for Milvus) ====================
  etcd:
    image: quay.io/coreos/etcd:${ETCD_VERSION:-v3.5.5}
    container_name: bisheng-etcd
    hostname: etcd
    restart: ${RESTART_POLICY:-unless-stopped}
    
    environment:
      ETCD_AUTO_COMPACTION_MODE: revision
      ETCD_AUTO_COMPACTION_RETENTION: "1000"
      ETCD_QUOTA_BACKEND_BYTES: "4294967296"
      ETCD_SNAPSHOT_COUNT: "50000"
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd:2379
    
    volumes:
      - etcd_data:/etcd
    
    ports:
      - "2379:2379"
    
    networks:
      - bisheng-network
    
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls=http://0.0.0.0:2379 --data-dir=/etcd
    
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512m
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== Milvus (Vector Database) ====================
  milvus:
    image: milvusdb/milvus:${MILVUS_VERSION:-v2.3.0}
    container_name: bisheng-milvus
    hostname: milvus
    restart: ${RESTART_POLICY:-unless-stopped}
    
    environment:
      ETCD_ENDPOINTS: ${ETCD_ENDPOINTS:-etcd:2379}
      MINIO_ADDRESS: ${MINIO_HOST:-minio}:${MINIO_PORT:-9000}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
    
    volumes:
      - milvus_data:/var/lib/milvus
      - ./configs/milvus/milvus.yaml:/milvus/configs/milvus.yaml:ro
      - ./logs/milvus:/var/log/milvus
    
    ports:
      - "${MILVUS_PORT:-19530}:19530"
      - "${MILVUS_HTTP_PORT:-9091}:9091"
    
    networks:
      - bisheng-network
    
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-90s}
    
    deploy:
      resources:
        limits:
          cpus: '${MILVUS_CPU_LIMIT:-2}'
          memory: ${MILVUS_MEM_LIMIT:-4g}
        reservations:
          cpus: '${MILVUS_CPU_RESERVATION:-1}'
          memory: ${MILVUS_MEM_RESERVATION:-2g}
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_ROTATION:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

  # ==================== Elasticsearch ====================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION:-8.11.0}
    container_name: bisheng-elasticsearch
    hostname: elasticsearch
    restart: ${RESTART_POLICY:-unless-stopped}
    
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=${ES_JAVA_OPTS:--Xms1g -Xmx1g}
      - xpack.security.enabled=${ES_SECURITY_ENABLED:-false}
      - xpack.security.http.ssl.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - bootstrap.memory_lock=true
    
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./configs/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ./logs/elasticsearch:/usr/share/elasticsearch/logs
    
    ports:
      - "${ES_PORT:-9200}:9200"
      - "9300:9300"
    
    networks:
      - bisheng-network
    
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-90s}
    
    deploy:
      resources:
        limits:
          cpus: '${ES_CPU_LIMIT:-2}'
          memory: ${ES_MEM_LIMIT:-4g}
        reservations:
          cpus: '${ES_CPU_RESERVATION:-1}'
          memory: ${ES_MEM_RESERVATION:-2g}
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_ROTATION:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

  # ==================== MinIO (Object Storage) ====================
  minio:
    image: minio/minio:${MINIO_VERSION:-latest}
    container_name: bisheng-minio
    hostname: minio
    restart: ${RESTART_POLICY:-unless-stopped}
    
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_REGION: ${MINIO_REGION:-us-east-1}
    
    command: server /data --console-address ":9001"
    
    volumes:
      - minio_data:/data
      - ./logs/minio:/root/.minio/logs
    
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    
    networks:
      - bisheng-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-60s}
    
    deploy:
      resources:
        limits:
          cpus: '${MINIO_CPU_LIMIT:-1}'
          memory: ${MINIO_MEM_LIMIT:-2g}
        reservations:
          cpus: '${MINIO_CPU_RESERVATION:-0.5}'
          memory: ${MINIO_MEM_RESERVATION:-1g}
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_ROTATION:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

  # ==================== Backend (Bisheng API) ====================
  backend:
    image: ${BACKEND_IMAGE:-dataelement/bisheng-backend:latest}
    container_name: bisheng-backend
    hostname: backend
    restart: ${RESTART_POLICY:-unless-stopped}
    
    environment:
      # Database
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-bisheng}
      POSTGRES_USER: ${POSTGRES_USER:-bisheng}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      
      # Redis
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      
      # Milvus
      MILVUS_HOST: ${MILVUS_HOST:-milvus}
      MILVUS_PORT: ${MILVUS_PORT:-19530}
      
      # Elasticsearch
      ES_HOST: ${ES_HOST:-elasticsearch}
      ES_PORT: ${ES_PORT:-9200}
      ES_PASSWORD: ${ELASTIC_PASSWORD:-changeme}
      
      # MinIO
      MINIO_ENDPOINT: ${MINIO_HOST:-minio}:${MINIO_PORT:-9000}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_BUCKET: ${MINIO_BUCKET:-bisheng}
      
      # JWT & Security
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key}
      
      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      
      # App Config
      BISHENG_ROLE: ${BISHENG_ROLE:-bisheng}
      LOG_LEVEL: ${BACKEND_LOG_LEVEL:-INFO}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    
    volumes:
      - ./data/bisheng:/app/data
      - ./logs/backend:/app/logs
      - ./configs/bisheng:/app/config:ro
    
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    
    networks:
      - bisheng-network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      milvus:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      minio:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
      start_period: ${HEALTH_CHECK_START_PERIOD:-120s}
    
    deploy:
      resources:
        limits:
          cpus: '${BACKEND_CPU_LIMIT:-2}'
          memory: ${BACKEND_MEM_LIMIT:-4g}
        reservations:
          cpus: '${BACKEND_CPU_RESERVATION:-1}'
          memory: ${BACKEND_MEM_RESERVATION:-2g}
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_ROTATION:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

  # ==================== Frontend (React UI) ====================
  frontend:
    image: ${FRONTEND_IMAGE:-dataelement/bisheng-frontend:latest}
    container_name: bisheng-frontend
    hostname: frontend
    restart: ${RESTART_POLICY:-unless-stopped}
    
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3001}
      VITE_APP_TITLE: ${VITE_APP_TITLE:-Bisheng Enterprise}
    
    volumes:
      - ./logs/frontend:/app/logs
    
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    
    networks:
      - bisheng-network
    
    depends_on:
      backend:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-60s}
    
    deploy:
      resources:
        limits:
          cpus: '${FRONTEND_CPU_LIMIT:-1}'
          memory: ${FRONTEND_MEM_LIMIT:-1g}
        reservations:
          cpus: '${FRONTEND_CPU_RESERVATION:-0.5}'
          memory: ${FRONTEND_MEM_RESERVATION:-512m}
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_ROTATION:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

# EOF
