


## 📄 الملف 33: `docker-compose.dev.yml`

##```yaml
# ============================================
# Bisheng Enterprise - Development Environment
# ============================================
version: '3.8'

# ============================================
# Networks
# ============================================
networks:
  bisheng-dev-network:
    driver: bridge

# ============================================
# Volumes
# ============================================
volumes:
  postgres-dev-data:
  redis-dev-data:
  milvus-dev-data:
  elasticsearch-dev-data:
  minio-dev-data:
  etcd-dev-data:

# ============================================
# Services
# ============================================
services:
  # ============================================
  # PostgreSQL (Development)
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: bisheng-dev-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: bisheng_dev
      POSTGRES_USER: bisheng_dev
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./dev-scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - bisheng-dev-network
    command: 
      - "postgres"
      - "-c"
      - "log_statement=all"
      - "-c"
      - "log_duration=on"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bisheng_dev -d bisheng_dev"]
      interval: 5s
      timeout: 3s
      retries: 5

  # ============================================
  # Redis (Development)
  # ============================================
  redis:
    image: redis:7.2-alpine
    container_name: bisheng-dev-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --loglevel debug
    volumes:
      - redis-dev-data:/data
    ports:
      - "6379:6379"
    networks:
      - bisheng-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # ============================================
  # MinIO (Development)
  # ============================================
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: bisheng-dev-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio-dev-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - bisheng-dev-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ============================================
  # Etcd (Development)
  # ============================================
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: bisheng-dev-etcd
    restart: unless-stopped
    environment:
      ETCD_AUTO_COMPACTION_MODE: revision
      ETCD_AUTO_COMPACTION_RETENTION: 1000
    volumes:
      - etcd-dev-data:/etcd
    networks:
      - bisheng-dev-network
    command: >
      etcd
      -advertise-client-urls=http://127.0.0.1:2379
      -listen-client-urls=http://0.0.0.0:2379
      --data-dir=/etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ============================================
  # Milvus (Development)
  # ============================================
  milvus:
    image: milvusdb/milvus:v2.5.10
    container_name: bisheng-dev-milvus
    restart: unless-stopped
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MINIO_ACCESS_KEY_ID: minioadmin
      MINIO_SECRET_ACCESS_KEY: minioadmin123
    volumes:
      - milvus-dev-data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    networks:
      - bisheng-dev-network
    command: ["milvus", "run", "standalone"]
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Elasticsearch (Development)
  # ============================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: bisheng-dev-elasticsearch
    restart: unless-stopped
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-dev-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - bisheng-dev-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Bisheng Backend (Development - Hot Reload)
  # ============================================
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile.dev
    container_name: bisheng-dev-backend
    restart: unless-stopped
    environment:
      # Development mode
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: DEBUG
      
      # Database
      DATABASE_URL: postgresql://bisheng_dev:dev_password_123@postgres:5432/bisheng_dev
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      
      # Milvus
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530
      
      # Elasticsearch
      ELASTICSEARCH_URL: http://elasticsearch:9200
      
      # MinIO
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: bisheng-dev
      
      # Development settings
      RELOAD: "true"
      WORKERS: 1
      
      # API Keys (development - use your own)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-sk-dev-key}
      
    volumes:
      # Mount source code for hot reload
      - ./src/backend:/app
      - ./configs/bisheng:/app/bisheng/config:ro
      - dev-cache:/app/cache
    ports:
      - "7860:7860"
      - "5678:5678"  # Debug port
    networks:
      - bisheng-dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      milvus:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    command: >
      uvicorn bisheng.main:app
      --host 0.0.0.0
      --port 7860
      --reload
      --log-level debug

  # ============================================
  # Bisheng Worker (Development)
  # ============================================
  worker:
    build:
      context: ./src/backend
      dockerfile: Dockerfile.dev
    container_name: bisheng-dev-worker
    restart: unless-stopped
    environment:
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: DEBUG
      DATABASE_URL: postgresql://bisheng_dev:dev_password_123@postgres:5432/bisheng_dev
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      MILVUS_HOST: milvus
      ELASTICSEARCH_URL: http://elasticsearch:9200
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    volumes:
      - ./src/backend:/app
      - dev-cache:/app/cache
    networks:
      - bisheng-dev-network
    depends_on:
      - postgres
      - redis
      - milvus
    command: >
      celery -A bisheng.worker worker
      --loglevel=debug
      --concurrency=2

  # ============================================
  # Bisheng Frontend (Development - Hot Reload)
  # ============================================
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile.dev
    container_name: bisheng-dev-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:7860/api/v1
      CHOKIDAR_USEPOLLING: "true"
    volumes:
      # Mount source code for hot reload
      - ./src/frontend:/app
      - /app/node_modules  # Prevent node_modules override
    ports:
      - "3000:3000"
    networks:
      - bisheng-dev-network
    depends_on:
      - backend
    command: npm start

  # ============================================
  # Flower (Celery Monitoring)
  # ============================================
  flower:
    build:
      context: ./src/backend
      dockerfile: Dockerfile.dev
    container_name: bisheng-dev-flower
    restart: unless-stopped
    environment:
      CELERY_BROKER_URL: redis://redis:6379/1
    ports:
      - "5555:5555"
    networks:
      - bisheng-dev-network
    depends_on:
      - redis
    command: >
      celery -A bisheng.worker flower
      --port=5555
      --broker=redis://redis:6379/1

  # ============================================
  # Adminer (Database Management)
  # ============================================
  adminer:
    image: adminer:latest
    container_name: bisheng-dev-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - bisheng-dev-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres

  # ============================================
  # Redis Commander (Redis Management)
  # ============================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: bisheng-dev-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - bisheng-dev-network
    depends_on:
      - redis

  # ============================================
  # MailHog (Email Testing)
  # ============================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: bisheng-dev-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - bisheng-dev-network

volumes:
  dev-cache:
    driver: local